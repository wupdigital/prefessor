apply plugin: 'com.android.library'
apply plugin: 'kotlin-platform-android'

def compile_sdk_version = 27

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27

        // Specifies the fully-qualified class name of the test instrumentation runner.
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // If set to 'true', enables the instrumentation class to start and stop profiling.
        // If set to false (default), profiling occurs the entire time the instrumentation
        // class is running.
        testHandleProfiling true
        // If set to 'true', indicates that the Android system should run the instrumentation
        // class as a functional test. The default value is 'false'
        testFunctionalTest true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', compile_sdk_version
        }
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly "com.android.support:support-annotations:27.1.1"
    expectedBy project(":prefessor-common")
    testImplementation "junit:junit:4.12"
    testImplementation 'com.android.support.test:runner:1.0.2'
    testImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.robolectric:robolectric:3.7.1"
}

tasks.matching { it instanceof Test }.all {
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.kotlin.srcDirs
    classifier = 'sources'
}